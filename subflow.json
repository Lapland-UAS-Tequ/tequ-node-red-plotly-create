{
    "id": "83d73bc419678fdc",
    "type": "subflow",
    "name": "create",
    "info": "Creates Plotly.js chart to be used in Node-RED Dashboard 2.0.\r\n\r\nConfig and layout can be configured.\r\n\r\nInput for this node should be either\r\n1. Dashboard 2.0 UI control node output \r\n2. Message payload with value \"reload\"\r\n\r\n\r\nThis node has two outputs:\r\n- Output 1 Plotly.js chart settings to add-node\r\n- Output 2 message to chart-node",
    "category": "Plotly",
    "in": [
        {
            "x": 60,
            "y": 80,
            "wires": [
                {
                    "id": "11466d0b8fefc464"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 670,
            "y": 60,
            "wires": [
                {
                    "id": "b8ecba2191fe104f",
                    "port": 0
                }
            ]
        },
        {
            "x": 680,
            "y": 120,
            "wires": [
                {
                    "id": "a4997c00a8d2d006",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "chart_name",
            "type": "str",
            "value": "m1_chart",
            "ui": {
                "label": {
                    "en-US": "Name"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "str"
                    ]
                }
            }
        },
        {
            "name": "config",
            "type": "json",
            "value": "{\"responsive\":true,\"scrollZoom\":false,\"modeBarButtonsToRemove\":[\"zoomIn2d\",\"zoomOut2d\"]}",
            "ui": {
                "label": {
                    "en-US": "Config"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "json"
                    ]
                }
            }
        },
        {
            "name": "layout",
            "type": "json",
            "value": "{\"title\":\"Machine 1\",\"showlegend\":true,\"autosize\":true,\"dragmode\":false,\"hovermode\":\"x unified\",\"hoverlabel\":{\"namelength\":-1,\"bgcolor\":\"rgb(255,255,255)\",\"bordercolor\":\"rgb(0,0,0)\",\"font\":{\"color\":\"rgb(0,0,0)\",\"family\":\"Helvetica\",\"size\":12},\"grouptitlefont\":{\"family\":\"Helvetica\",\"size\":12}},\"margin\":{\"l\":35,\"r\":0,\"t\":50,\"b\":50},\"legend\":{\"orientation\":\"h\",\"font\":{\"color\":\"rgb(0, 0,0)\",\"family\":\"Helvetica\",\"size\":10}},\"xaxis\":{\"autorange\":true,\"hoverformat\":\"%a %e.%-m.%y klo %H:%M:%S\"},\"yaxis\":{\"autorange\":true,\"type\":\"linear\",\"ticksuffix\":\" Â°C\",\"hoverformat\":\".1f\",\"titlefont\":{\"size\":12,\"family\":\"Helvetica\",\"color\":\"rgb(0,0,0)\"},\"tickfont\":{\"size\":12,\"family\":\"Helvetica\",\"color\":\"rgb(0,0,0)\"}}}",
            "ui": {
                "label": {
                    "en-US": "Layout"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "json"
                    ]
                }
            }
        },
        {
            "name": "page",
            "type": "str",
            "value": "Room control",
            "ui": {
                "label": {
                    "en-US": "Dashboard page"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "str"
                    ]
                }
            }
        },
        {
            "name": "delay_to_add",
            "type": "num",
            "value": "200",
            "ui": {
                "label": {
                    "en-US": "Delay to Add"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "num"
                    ]
                }
            }
        },
        {
            "name": "delay_to_create",
            "type": "num",
            "value": "10",
            "ui": {
                "label": {
                    "en-US": "Delay to create"
                },
                "type": "input",
                "opts": {
                    "types": [
                        "num"
                    ]
                }
            }
        }
    ],
    "meta": {
        "module": "tequ-node-red-plotly-create",
        "version": "0.0.5",
        "author": "juha.autioniemi@lapinamk.fi",
        "desc": "Create Plotly.js chart.",
        "license": "MIT"
    },
    "color": "#3FADB5",
    "inputLabels": [
        "UI control in"
    ],
    "outputLabels": [
        "To add node",
        "To chart node"
    ],
    "icon": "font-awesome/fa-line-chart",
    "status": {
        "x": 620,
        "y": 220,
        "wires": [
            {
                "id": "69bdf6d236031436",
                "port": 0
            }
        ]
    },
    "flow": [
        {
            "id": "11466d0b8fefc464",
            "type": "function",
            "z": "83d73bc419678fdc",
            "name": "Create",
            "func": "let page = msg.name;\nlet action = msg.payload;\n//let chart_name = env.get(\"chart_name\");\n//let config = env.get(\"config\");\n//let layout = env.get(\"layout\");\n//let delay = env.get(\"delay\");\n//let target_page = env.get(\"page\")\n\nlet chart_name;\nlet config;\nlet layout;\nlet delay;\nlet target_page;\nlet chart_id;\n\nlet settings = {}\nlet config_values = [\"chart_name\",\"config\",\"layout\",\"delay_to_add\",\"delay_to_create\",\"target_page\"]\n\nfor(let value in config_values){\n\n    let setting = config_values[value]\n\n    settings[setting] = {}\n    if(setting in msg){\n        settings[setting] = msg[setting];\n    }\n    else{\n        settings[setting] = env.get(setting)\n    }\n}\n\n\nfunction createMessage(chart_settings){\n    let dataArray = []\n\n    let traces = global.get(chart_settings[\"chart_name\"]) || {}\n\n    for (let value in traces) {\n        dataArray.push(traces[value])\n    }\n\n    let plotly_chart = {\n        \"data\": dataArray,\n        \"config\": chart_settings[\"config\"],\n        \"layout\": chart_settings[\"layout\"],\n    }\n\n    msg.payload = plotly_chart;\n    msg.action = \"create\";\n    msg.delay = chart_settings[\"delay\"];\n    msg.chart_name = chart_settings[\"chart_name\"];\n    msg.delay = chart_settings[\"delay_to_add\"];\n    node.send([msg,null])\n    msg.delay = chart_settings[\"delay_to_create\"];\n    node.send([null,msg])\n\n}\n\nif (action == \"change\" && page == settings[\"target_page\"]){\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"Change | \" + settings[\"chart_name\"] });   \n    createMessage(settings);\n}\nelse if(action == \"connect\"){\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Connect | \" + settings[\"chart_name\"] }); \n    settings[\"delay\"] = settings[\"delay\"] * 5;\n    createMessage(settings);\n}\nelse if (action == \"reload\") {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"Reload | \" + settings[\"chart_name\"] });\n    createMessage(settings);\n}\nelse{\n    //node.status({fill:\"red\",shape:\"dot\",text:\"no action\"});\n    //node.warn(msg)\n    //do nothing\n}",
            "outputs": 2,
            "timeout": 0,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 190,
            "y": 80,
            "wires": [
                [
                    "b8ecba2191fe104f"
                ],
                [
                    "a4997c00a8d2d006"
                ]
            ],
            "outputLabels": [
                "Add",
                "Create"
            ]
        },
        {
            "id": "b8ecba2191fe104f",
            "type": "delay",
            "z": "83d73bc419678fdc",
            "name": "200ms",
            "pauseType": "delayv",
            "timeout": "200",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 450,
            "y": 60,
            "wires": [
                []
            ]
        },
        {
            "id": "69bdf6d236031436",
            "type": "status",
            "z": "83d73bc419678fdc",
            "name": "",
            "scope": [
                "11466d0b8fefc464"
            ],
            "x": 440,
            "y": 220,
            "wires": [
                []
            ]
        },
        {
            "id": "a4997c00a8d2d006",
            "type": "delay",
            "z": "83d73bc419678fdc",
            "name": "10ms",
            "pauseType": "delayv",
            "timeout": "10",
            "timeoutUnits": "milliseconds",
            "rate": "1",
            "nbRateUnits": "1",
            "rateUnits": "second",
            "randomFirst": "1",
            "randomLast": "5",
            "randomUnits": "seconds",
            "drop": false,
            "allowrate": false,
            "outputs": 1,
            "x": 450,
            "y": 120,
            "wires": [
                []
            ]
        },
        {
            "id": "849a3d66be0cb346",
            "type": "subflow:83d73bc419678fdc",
            "z": "debe57df1350b9f8",
            "name": "",
            "env": [
                {
                    "name": "chart_name",
                    "value": "x_chart",
                    "type": "str"
                },
                {
                    "name": "page",
                    "value": "Acc_XYZ",
                    "type": "str"
                }
            ],
            "x": 670,
            "y": 80,
            "wires": [
                [
                    "5724de7a73044d14"
                ],
                [
                    "c7e61d2018f513ae"
                ]
            ]
        }
    ]
}